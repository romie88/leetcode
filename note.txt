- Min Stack [ Stack, Data Structure ] 2014-11-09

    A stack with push(), pop(), top(), getMin() in O(1).
    Use an extra stack with top element being the current minimum element.
    Very similar we can have Max Stack.
    However can we extend the question to Min Queue/Max Queue???
    I searched on Web. It turns out Min Queue is a Google interview question:
    
    Implement a queue in which push_rear(), pop_front() and get_min() are all
    constant time operations.
    
    There are two ways to solve this problem. The first method is to use an
    extra deque which keeps the minimum on the front end of the deque. Check
    the code in
    
    extension/Min.Queue.deque.cpp
    
    However, pop_front() is amortized O(1).
    
    The second method is to use two min stacks. Check the code in

    extension/Min.Queue.two.min.stacks.cpp

    There is another interesting but related problem Sliding Window Maximum.

    A long array A[] is given to you. There is a sliding window of size w
    which is moving from the very left of the array to the very right. You
    can only see the w numbers in the window. Each time the sliding window
    moves rightwards by one position. Following is an example:

    The array is [1 3 -1 -3 5 3 6 7], and w is 3.

    Window position                Max
    ---------------               -----
    [1  3  -1] -3  5  3  6  7       3
     1 [3  -1  -3] 5  3  6  7       3
     1  3 [-1  -3  5] 3  6  7       5
     1  3  -1 [-3  5  3] 6  7       5
     1  3  -1  -3 [5  3  6] 7       6
     1  3  -1  -3  5 [3  6  7]      7
    
    Input: A long array A[], and a window width w
    Output: An array B[], B[i] is the maximum value of from A[i] to A[i+w-1]
    Requirement: Find a good optimal way to get B[i]
    
    The obvious brute force solution with run time complexity of O(nw) is
    definitely not efficient enough. Every time the window is moved, you have
    to search for a total of w elements in the window.

    

- Find Minimum in Rotated Sorted Array
	binary search the pivot

- Maximum Product Subarray
	dynamic programming tracking both max postive and min negative product ending at the current index	

- Reverse Words in a String
	after the loop of breaking up the input string into words, don't forget to process the remaining of the input string.

- Evaluate Reverse Polish Notation
	for operator - and /, pay attention to the order of the operands from the stack.

- Max Points on a Line
	dont forget duplication

- Sqrt(x)
	binary search (not trivial); watch out that mid * mid overflow
	Newton iteration method

- Valid Number
	finite automata
	direct

- String to Integer (atoi)
	watch out the overflow/underflow

- Roman to Integer
- Integer to Roman

- Reverse Integer
	cannot overcome the overflow issue happening when i == INT_MIN and i = -i because -INT_MIN cannot be represented in int
	note that % operator in C++ has some implemenation defined behavior when one of the operands is negative

- Pow(x,n)
	recursive call pow( x, n ) but half of n but with x * x!!!

- Plus One
	when iterating through std::vector by index, be careful using std::vector< T >::size_type, as it is unsigned, looping from size() - 1 down to 0 is infinite!!!

- Permutation Sequence
	not comfortable with have an std::vector to keep all the numbers but erase them one by one in a loop which is O(n^2)

- Palindrome Number
	OJ decides negative numbers are not palindrome number

- Multiply Strings
	it is complicated that 9335 * 0 cannot produce 0000 and 6 * 305 must append extra zero.

- Divide Two Integers
	overflow issue handled by using long long; using operator << to enlarge the divisor until it gets close to the dividend

- Add Two Numbers
	iterates two linked lists and builds another list at the same time. Zhang Lei adds a dummy head node to handle the initial loop iteration difficulties

- Add Binary
	similar to other integers addition/multiplication problems.


- Surrounded Regions (Breadth-first Search) 2013-02-21

	The most intuitive way is to scan all the nodes, if meet an 'O', then look
    for a path leading to the boundary (all four directions are checked, DFS
    can be used), if cannot find one, this node has no way out, flip it to 'X'.
    However this cannot pass the larget test case (250x250 matrix).

    Think the problem from out to inside. If an 'O' on the boundary then it is
    not flipped. We can BFS from each 'O' on the boundary, mark all its
    neighbors which are 'O's as no-need-to-flip.

    BFS uses a queu. DFS uses a stack.
